{"version":3,"sources":["Components/Wrapper/index.js","Components/Apostle/index.js","Components/Navbar/index.js","Components/Header/index.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","ApostleCard","id","onClick","onclick","alt","name","src","image","Navbar","title","score","topScore","Header","footer","App","state","clicked","apostle","shuffleArray","a","i","length","j","Math","floor","random","picClicked","event","console","log","target","includes","setState","push","this","map","Apostle","key","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gkDAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCc1BC,MAff,SAAqBH,GACnB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,iBACb,yBACEG,GAAIJ,EAAMI,GACVC,QAASL,EAAMM,QACfC,IAAKP,EAAMQ,KACXC,IAAKT,EAAMU,W,aCQNC,MAhBf,SAAgBX,GACd,OACE,yBAAKC,UAAU,2BACb,4BACE,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,YACZ,4BAAKD,EAAMY,QAEb,wBAAIX,UAAU,YAAd,UACUD,EAAMa,MADhB,kBACsCb,EAAMc,a,MCErCC,MAXf,SAAgBf,GACd,OACE,gCACE,6H,MCISgB,MAPf,SAAgBhB,GACd,OACE,gCACE,iDCkFSiB,E,4MA9EbC,MAAQ,CACNL,MAAO,EACPC,SAAU,EACVK,QAAS,GACTC,UACAR,MAAO,sC,EAITS,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEG,GAF4B,KAIvC,OAAOH,G,EASTO,WAAa,SAAAC,GACXC,QAAQC,IAAI,YAAaF,EAAMG,OAAO7B,IAClC,EAAKc,MAAMC,QAAQe,SAASJ,EAAMG,OAAO7B,KAC3C2B,QAAQC,IAAI,wBACZ,EAAKG,SAAS,CACZf,QAAS,EAAKC,aAAa,EAAKH,MAAME,SACtCD,QAAS,GACTN,MAAO,EACPD,MAAO,gEAGTmB,QAAQC,IAAI,qBACZ,EAAKd,MAAMC,QAAQiB,KAAKN,EAAMG,OAAO7B,IACjC,EAAKc,MAAML,MAAQ,EAAI,EAAKK,MAAMJ,SACpC,EAAKqB,SAAS,CACZf,QAAS,EAAKC,aAAa,EAAKH,MAAME,SACtCP,MAAO,EAAKK,MAAML,MAAQ,EAC1BD,MAAO,yBACPE,SAAU,EAAKI,MAAML,MAAQ,IAG/B,EAAKsB,SAAS,CACZf,QAAS,EAAKC,aAAa,EAAKH,MAAME,SACtCP,MAAO,EAAKK,MAAML,MAAQ,EAC1BD,MAAO,6B,kEA5BbyB,KAAKF,SAAS,CAAEf,QAASiB,KAAKhB,aAAaD,O,+BAmCnC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEP,MAAOwB,KAAKnB,MAAML,MAClBD,MAAOyB,KAAKnB,MAAMN,MAClBE,SAAUuB,KAAKnB,MAAMJ,WAEtBuB,KAAKnB,MAAME,QAAQkB,KAAI,SAAAlB,GAAO,OAC7B,kBAACmB,EAAD,CACEnC,GAAIgB,EAAQhB,GACZoC,IAAKpB,EAAQhB,GACbI,KAAMY,EAAQZ,KACdE,MAAOU,EAAQV,MACfJ,QAAS,EAAKuB,gBAGlB,kBAACY,EAAD,W,GA1EUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.e3578fae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ApostleCard(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"img-container\">\r\n        <img\r\n          id={props.id}\r\n          onClick={props.onclick}\r\n          alt={props.name}\r\n          src={props.image}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ApostleCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg\">\r\n      <ul>\r\n        <li className=\"nav-item\">Clicky Game</li>\r\n        <li className=\"nav-item\">\r\n          <h1>{props.title}</h1>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          Score: {props.score} || Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        Click an Apostle to get a point, but don't click the same picture twice\r\n        or it is Game Over!\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction footer(props) {\r\n  return (\r\n    <footer>\r\n      <h3>Made with React</h3>\r\n    </footer>\r\n  );\r\n}\r\nexport default footer;\r\n","import React, { Component } from \"react\";\nimport Wrapper from \"./Components/Wrapper\";\nimport ApostleCard from \"./Components/Apostle\";\nimport apostle from \"./apostles.json\";\nimport Navbar from \"./Components/Navbar\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\n\nclass App extends Component {\n  // setting states\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    apostle,\n    title: \"Click a picture to start the game!\"\n  };\n\n  // Fisher-yates Shuffle used to shuffle apostle array\n  shuffleArray = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  // onload?\n  componentDidMount() {\n    this.setState({ apostle: this.shuffleArray(apostle) });\n  }\n\n  // picClicked\n  picClicked = event => {\n    console.log(\"id of pic\", event.target.id);\n    if (this.state.clicked.includes(event.target.id)) {\n      console.log(\"this one be included\");\n      this.setState({\n        apostle: this.shuffleArray(this.state.apostle),\n        clicked: [],\n        score: 0,\n        title: \"Incorrect Guess, Start Over by clicking another Picture!!\"\n      });\n    } else {\n      console.log(\"aint this one yet\");\n      this.state.clicked.push(event.target.id);\n      if (this.state.score + 1 > this.state.topScore) {\n        this.setState({\n          apostle: this.shuffleArray(this.state.apostle),\n          score: this.state.score + 1,\n          title: \"You Guessed Correctly!\",\n          topScore: this.state.score + 1\n        });\n      } else {\n        this.setState({\n          apostle: this.shuffleArray(this.state.apostle),\n          score: this.state.score + 1,\n          title: \"You Guessed Correctly!\"\n        });\n      }\n    }\n  };\n\n  // render\n  render() {\n    return (\n      <Wrapper>\n        <Header />\n        <Navbar\n          score={this.state.score}\n          title={this.state.title}\n          topScore={this.state.topScore}\n        ></Navbar>\n        {this.state.apostle.map(apostle => (\n          <ApostleCard\n            id={apostle.id}\n            key={apostle.id}\n            name={apostle.name}\n            image={apostle.image}\n            onclick={this.picClicked}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}